@inject AuthenticationStateProvider GetAuthenticationStateAsync

<!-- Profile dropdown -->
<AuthorizeView>
    <Authorized>
        <OutsideClickHandler class="relative self-center" OnOutsideClick="CloseUserMenu" StopPropagation="!UserMenuVisible">
            <button type="button" class="-m-1.5 flex items-center p-1.5" id="user-menu-button" aria-expanded="false" aria-haspopup="true" @onclick:stopPropagation="true" @onclick="ToggleUserMenu">
                <span class="sr-only">Open user menu</span>
                <img class="h-8 w-8 rounded-full bg-gray-50" src="@Picture" alt="">
                <span class="hidden lg:flex lg:items-center">
                    <span class="ml-4 text-sm font-semibold leading-6 text-gray-900 capitalize" aria-hidden="true">@UserName</span>
                    <svg class="ml-2 h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon">
                        <path fill-rule="evenodd" d="M5.22 8.22a.75.75 0 0 1 1.06 0L10 11.94l3.72-3.72a.75.75 0 1 1 1.06 1.06l-4.25 4.25a.75.75 0 0 1-1.06 0L5.22 9.28a.75.75 0 0 1 0-1.06Z" clip-rule="evenodd"/>
                    </svg>
                </span>
            </button>

            <!--
              Dropdown menu, show/hide based on menu state.
        
              Entering: "transition ease-out duration-100"
                From: "transform opacity-0 scale-95"
                To: "transform opacity-100 scale-100"
              Leaving: "transition ease-in duration-75"
                From: "transform opacity-100 scale-100"
                To: "transform opacity-0 scale-95"
            -->
            <TailwindTransitionalElement @bind-IsOpened="UserMenuVisible"
                                         Entering="transition ease-out duration-100"
                                         EnteringFrom="transform opacity-0 scale-95"
                                         EnteringTo="transform opacity-100"
                                         Leaving="transition ease-in duration-75"
                                         LeavingFrom="transform opacity-100 scale-100"
                                         LeavingTo="transform opacity-0 scale-95"
                                         AdditionalClasses="absolute right-0 z-10 mt-2.5 w-32 origin-top-right rounded-md bg-white py-2 shadow-lg ring-1 ring-gray-900/5 focus:outline-none"
                                         role="menu" aria-orientation="vertical" aria-labelledby="user-menu-button" tabindex="-1">
                <!-- Active: "bg-gray-50", Not Active: "" -->
                @* <a href="#" class="block px-3 py-1 text-sm leading-6 text-gray-900" role="menuitem" tabindex="-1" id="user-menu-item-0">Your profile</a> *@
                <a href="Account/Logout" class="block px-3 py-1 text-sm leading-6 text-gray-900" role="menuitem" tabindex="-1" id="user-menu-item-1">Sign out</a>
            </TailwindTransitionalElement>
        </OutsideClickHandler>
    </Authorized>
    <NotAuthorized>
        <a href="Account/Login" class="-m-1.5 flex items-center p-1.5" id="user-signin-button">
            <Icon Name="FontAwesomeIcons.RightToBracket" IconSize="IconSize.Large"/>
            <span class="hidden lg:flex lg:items-center">
                <span class="ml-4 text-sm font-semibold leading-6 text-gray-900">Sign in</span>
            </span>
        </a>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool UserMenuVisible { get; set; } = false;
    private string UserName { get; set; } = "";
    private string Picture { get; set; } = "";

    private void ToggleUserMenu() => UserMenuVisible = !UserMenuVisible;

    protected override async Task OnInitializedAsync()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity is { IsAuthenticated: true })
        {
            UserName = user.FindFirst("nickname")?.Value ?? "(Unknown)";
            Picture = user.FindFirst("picture")?.Value ?? "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80";
        }
    }

    private void CloseUserMenu()
    {
        UserMenuVisible = false;
        StateHasChanged();
    }

}